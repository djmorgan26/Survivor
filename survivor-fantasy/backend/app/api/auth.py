from fastapi import APIRouter, Depends
from fastapi_users import FastAPIUsers, BaseUserManager
from fastapi_users.schemas import BaseUser, BaseUserCreate, BaseUserUpdate
from fastapi_users.authentication import AuthenticationBackend, BearerTransport, JWTStrategy
from fastapi_users.db import SQLAlchemyUserDatabase
from app.core.config import settings
from app.models.user import User
from app.core.database import get_async_session
from typing import Optional

router = APIRouter()

# Define the user schemas using the new base classes
class UserRead(BaseUser[int]):
    username: str
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    is_admin: bool = False

class UserCreate(BaseUserCreate):
    username: str
    first_name: Optional[str] = None
    last_name: Optional[str] = None

class UserUpdate(BaseUserUpdate):
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None

# User database dependency
async def get_user_db(session = Depends(get_async_session)):
    yield SQLAlchemyUserDatabase(session, User)

# User manager
class UserManager(BaseUserManager[User, int]):
    reset_password_token_secret = settings.SECRET_KEY
    verification_token_secret = settings.SECRET_KEY

    async def on_after_register(self, user: User, request = None):
        print(f"User {user.id} has registered.")

    async def on_after_forgot_password(self, user: User, token: str, request = None):
        print(f"User {user.id} has forgot their password. Reset token: {token}")

# User manager dependency
async def get_user_manager(user_db = Depends(get_user_db)):
    yield UserManager(user_db)

# JWT Strategy
def get_jwt_strategy() -> JWTStrategy:
    return JWTStrategy(secret=settings.SECRET_KEY, lifetime_seconds=3600)

# Authentication backend
bearer_transport = BearerTransport(tokenUrl="auth/login")
auth_backend = AuthenticationBackend(
    name="jwt",
    transport=bearer_transport,
    get_strategy=get_jwt_strategy,
)

# FastAPI Users instance
fastapi_users = FastAPIUsers[User, int](
    get_user_manager,
    [auth_backend],
)

# Get current user dependencies
current_active_user = fastapi_users.current_user(active=True)
current_superuser = fastapi_users.current_user(active=True, superuser=True)

# Auth routes - these are automatically generated by FastAPI-Users
auth_router = fastapi_users.get_auth_router(auth_backend)
register_router = fastapi_users.get_register_router(UserRead, UserCreate)
users_router = fastapi_users.get_users_router(UserRead, UserUpdate)
reset_password_router = fastapi_users.get_reset_password_router()

# Custom endpoints (if needed)
@router.get("/me", response_model=UserRead)
async def read_users_me(user: User = Depends(current_active_user)):
    """Get current user information"""
    return user

@router.get("/test")
async def test_auth():
    """Test endpoint to verify auth is working"""
    return {"message": "Auth endpoints are working!"}